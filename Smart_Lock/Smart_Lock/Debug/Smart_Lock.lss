
Smart_Lock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001044  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a5c  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004dc  00000000  00000000  00001e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00002368  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000531  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f2  00000000  00000000  00002941  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002b33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 2c 01 	call	0x258	; 0x258 <main>
  c4:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <GPIO_pinMode>:
}

// Lee el estado de un pin de entrada
uint8_t GPIO_digitalRead(volatile uint8_t *pin_reg, uint8_t pin) {
	return (*pin_reg & (1 << pin)) ? HIGH : LOW;
}
  cc:	fc 01       	movw	r30, r24
  ce:	41 30       	cpi	r20, 0x01	; 1
  d0:	59 f4       	brne	.+22     	; 0xe8 <GPIO_pinMode+0x1c>
  d2:	20 81       	ld	r18, Z
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <GPIO_pinMode+0x12>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <GPIO_pinMode+0xe>
  e2:	82 2b       	or	r24, r18
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret
  e8:	90 81       	ld	r25, Z
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <GPIO_pinMode+0x28>
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <GPIO_pinMode+0x24>
  f8:	20 95       	com	r18
  fa:	29 23       	and	r18, r25
  fc:	20 83       	st	Z, r18
  fe:	08 95       	ret

00000100 <GPIO_digitalWrite>:
 100:	fc 01       	movw	r30, r24
 102:	41 30       	cpi	r20, 0x01	; 1
 104:	59 f4       	brne	.+22     	; 0x11c <GPIO_digitalWrite+0x1c>
 106:	20 81       	ld	r18, Z
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <GPIO_digitalWrite+0x12>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <GPIO_digitalWrite+0xe>
 116:	82 2b       	or	r24, r18
 118:	80 83       	st	Z, r24
 11a:	08 95       	ret
 11c:	90 81       	ld	r25, Z
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <GPIO_digitalWrite+0x28>
 124:	22 0f       	add	r18, r18
 126:	33 1f       	adc	r19, r19
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <GPIO_digitalWrite+0x24>
 12c:	20 95       	com	r18
 12e:	29 23       	and	r18, r25
 130:	20 83       	st	Z, r18
 132:	08 95       	ret

00000134 <GPIO_enablePullup>:

// Activa o desactiva la resistencia pull-up en un pin de entrada
void GPIO_enablePullup(volatile uint8_t *port, uint8_t pin, uint8_t enable) {
	if (enable) {
 134:	44 23       	and	r20, r20
 136:	61 f0       	breq	.+24     	; 0x150 <GPIO_enablePullup+0x1c>
		*port |= (1 << pin);  // Activar pull-up
 138:	fc 01       	movw	r30, r24
 13a:	40 81       	ld	r20, Z
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <GPIO_enablePullup+0x12>
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <GPIO_enablePullup+0xe>
 14a:	24 2b       	or	r18, r20
 14c:	20 83       	st	Z, r18
 14e:	08 95       	ret
		} else {
		*port &= ~(1 << pin); // Desactivar pull-up
 150:	fc 01       	movw	r30, r24
 152:	40 81       	ld	r20, Z
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <GPIO_enablePullup+0x2a>
 15a:	22 0f       	add	r18, r18
 15c:	33 1f       	adc	r19, r19
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <GPIO_enablePullup+0x26>
 162:	20 95       	com	r18
 164:	24 23       	and	r18, r20
 166:	20 83       	st	Z, r18
 168:	08 95       	ret

0000016a <setup_gpio>:
	 _delay_ms(10000); // Esperar 2 segundos
	// Apagar LED1, encender LED2 y activar buzzer
	 GPIO_digitalWrite(&PORTC, LED1, LOW);   // Apaga LED1
	 GPIO_digitalWrite(&PORTC, LED2, HIGH);   // Enciende LED2
	 _delay_ms(10000); // Esperar 2 segundos
	 GPIO_digitalWrite(&PORTC, LED2, LOW);   // Apaga LED2
 16a:	41 e0       	ldi	r20, 0x01	; 1
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	87 e2       	ldi	r24, 0x27	; 39
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_pinMode>
 176:	41 e0       	ldi	r20, 0x01	; 1
 178:	62 e0       	ldi	r22, 0x02	; 2
 17a:	87 e2       	ldi	r24, 0x27	; 39
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_pinMode>
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	63 e0       	ldi	r22, 0x03	; 3
 186:	87 e2       	ldi	r24, 0x27	; 39
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_pinMode>
 18e:	41 e0       	ldi	r20, 0x01	; 1
 190:	67 e0       	ldi	r22, 0x07	; 7
 192:	8a e2       	ldi	r24, 0x2A	; 42
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_pinMode>
 19a:	41 e0       	ldi	r20, 0x01	; 1
 19c:	66 e0       	ldi	r22, 0x06	; 6
 19e:	8a e2       	ldi	r24, 0x2A	; 42
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_pinMode>
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	65 e0       	ldi	r22, 0x05	; 5
 1aa:	8a e2       	ldi	r24, 0x2A	; 42
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_pinMode>
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	64 e0       	ldi	r22, 0x04	; 4
 1b6:	8a e2       	ldi	r24, 0x2A	; 42
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_pinMode>
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	63 e0       	ldi	r22, 0x03	; 3
 1c2:	8a e2       	ldi	r24, 0x2A	; 42
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_pinMode>
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	62 e0       	ldi	r22, 0x02	; 2
 1ce:	8a e2       	ldi	r24, 0x2A	; 42
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_pinMode>
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	8a e2       	ldi	r24, 0x2A	; 42
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 66 00 	call	0xcc	; 0xcc <GPIO_pinMode>
 1e2:	41 e0       	ldi	r20, 0x01	; 1
 1e4:	63 e0       	ldi	r22, 0x03	; 3
 1e6:	8b e2       	ldi	r24, 0x2B	; 43
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 9a 00 	call	0x134	; 0x134 <GPIO_enablePullup>
 1ee:	41 e0       	ldi	r20, 0x01	; 1
 1f0:	62 e0       	ldi	r22, 0x02	; 2
 1f2:	8b e2       	ldi	r24, 0x2B	; 43
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 9a 00 	call	0x134	; 0x134 <GPIO_enablePullup>
 1fa:	41 e0       	ldi	r20, 0x01	; 1
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	8b e2       	ldi	r24, 0x2B	; 43
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 9a 00 	call	0x134	; 0x134 <GPIO_enablePullup>
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	88 e2       	ldi	r24, 0x28	; 40
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_digitalWrite>
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	62 e0       	ldi	r22, 0x02	; 2
 216:	88 e2       	ldi	r24, 0x28	; 40
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_digitalWrite>
 21e:	40 e0       	ldi	r20, 0x00	; 0
 220:	63 e0       	ldi	r22, 0x03	; 3
 222:	88 e2       	ldi	r24, 0x28	; 40
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_digitalWrite>
 22a:	08 95       	ret

0000022c <beep_buzzer>:
}

void beep_buzzer(void) {
	// Activar el buzzer
	 GPIO_digitalWrite(&PORTC, BUZZER, HIGH);   // Enciende BUZZER
 22c:	41 e0       	ldi	r20, 0x01	; 1
 22e:	63 e0       	ldi	r22, 0x03	; 3
 230:	88 e2       	ldi	r24, 0x28	; 40
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_digitalWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	2f e3       	ldi	r18, 0x3F	; 63
 23a:	8d e0       	ldi	r24, 0x0D	; 13
 23c:	93 e0       	ldi	r25, 0x03	; 3
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <beep_buzzer+0x12>
 246:	00 c0       	rjmp	.+0      	; 0x248 <beep_buzzer+0x1c>
 248:	00 00       	nop
	// Esperar 64 milisegundos
	_delay_ms(1000);
	// Desactivar el buzzer
	 GPIO_digitalWrite(&PORTC, BUZZER, LOW);   // APAGA BUZZER
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	63 e0       	ldi	r22, 0x03	; 3
 24e:	88 e2       	ldi	r24, 0x28	; 40
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_digitalWrite>
 256:	08 95       	ret

00000258 <main>:
void toggle_leds(void);
void beep_buzzer(void);

int main(void)
{
	    setup_gpio(); // Configurar GPIOs
 258:	0e 94 b5 00 	call	0x16a	; 0x16a <setup_gpio>
		
			// Inicializar los pines de los leds
			GPIO_digitalWrite(&PORTD, FILA_1, LOW);   // Apagar LED1
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	67 e0       	ldi	r22, 0x07	; 7
 260:	8b e2       	ldi	r24, 0x2B	; 43
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_digitalWrite>
			GPIO_digitalWrite(&PORTD, FILA_2, HIGH);   // Apagar LED1
 268:	41 e0       	ldi	r20, 0x01	; 1
 26a:	66 e0       	ldi	r22, 0x06	; 6
 26c:	8b e2       	ldi	r24, 0x2B	; 43
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_digitalWrite>
			GPIO_digitalWrite(&PORTD, FILA_3, HIGH);   // Apagar LED1
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	65 e0       	ldi	r22, 0x05	; 5
 278:	8b e2       	ldi	r24, 0x2B	; 43
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_digitalWrite>
			GPIO_digitalWrite(&PORTD, FILA_4, HIGH);   // Apagar LED1
 280:	41 e0       	ldi	r20, 0x01	; 1
 282:	64 e0       	ldi	r22, 0x04	; 4
 284:	8b e2       	ldi	r24, 0x2B	; 43
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_digitalWrite>
			
			beep_buzzer();	// Secuencia de Beep del buzzer
 28c:	0e 94 16 01 	call	0x22c	; 0x22c <beep_buzzer>
 290:	2f e3       	ldi	r18, 0x3F	; 63
 292:	8d e0       	ldi	r24, 0x0D	; 13
 294:	93 e0       	ldi	r25, 0x03	; 3
 296:	21 50       	subi	r18, 0x01	; 1
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <main+0x3e>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <main+0x48>
 2a0:	00 00       	nop
			_delay_ms(1000);
			beep_buzzer();	// Secuencia de Beep del buzzer		
 2a2:	0e 94 16 01 	call	0x22c	; 0x22c <beep_buzzer>

    while (1) {
		
		if ((PIND & MASCARA) != MASCARA) {
 2a6:	89 b1       	in	r24, 0x09	; 9
 2a8:	8e 70       	andi	r24, 0x0E	; 14
 2aa:	8e 30       	cpi	r24, 0x0E	; 14
 2ac:	e1 f3       	breq	.-8      	; 0x2a6 <main+0x4e>
			beep_buzzer();
 2ae:	0e 94 16 01 	call	0x22c	; 0x22c <beep_buzzer>
 2b2:	f9 cf       	rjmp	.-14     	; 0x2a6 <main+0x4e>

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
