
Smart_Lock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000047c  00000510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010c  0080010c  0000051c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000590  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014b9  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7a  00000000  00000000  00001b19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007eb  00000000  00000000  00002693  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00002e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b6  00000000  00000000  00002f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000423  00000000  00000000  00003526  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003949  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec e7       	ldi	r30, 0x7C	; 124
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 30       	cpi	r26, 0x0C	; 12
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ac e0       	ldi	r26, 0x0C	; 12
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a0 31       	cpi	r26, 0x10	; 16
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 ef 01 	call	0x3de	; 0x3de <main>
  ea:	0c 94 3c 02 	jmp	0x478	; 0x478 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <GPIO_pinMode>:
}

// Lee el estado de un pin de entrada
uint8_t GPIO_digitalRead(volatile uint8_t *pin_reg, uint8_t pin) {
	return (*pin_reg & (1 << pin)) ? HIGH : LOW;
}
  f2:	fc 01       	movw	r30, r24
  f4:	41 30       	cpi	r20, 0x01	; 1
  f6:	59 f4       	brne	.+22     	; 0x10e <GPIO_pinMode+0x1c>
  f8:	20 81       	ld	r18, Z
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <GPIO_pinMode+0x12>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <GPIO_pinMode+0xe>
 108:	82 2b       	or	r24, r18
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret
 10e:	90 81       	ld	r25, Z
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <GPIO_pinMode+0x28>
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <GPIO_pinMode+0x24>
 11e:	20 95       	com	r18
 120:	29 23       	and	r18, r25
 122:	20 83       	st	Z, r18
 124:	08 95       	ret

00000126 <GPIO_digitalWrite>:
 126:	fc 01       	movw	r30, r24
 128:	41 30       	cpi	r20, 0x01	; 1
 12a:	59 f4       	brne	.+22     	; 0x142 <GPIO_digitalWrite+0x1c>
 12c:	20 81       	ld	r18, Z
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <GPIO_digitalWrite+0x12>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <GPIO_digitalWrite+0xe>
 13c:	82 2b       	or	r24, r18
 13e:	80 83       	st	Z, r24
 140:	08 95       	ret
 142:	90 81       	ld	r25, Z
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <GPIO_digitalWrite+0x28>
 14a:	22 0f       	add	r18, r18
 14c:	33 1f       	adc	r19, r19
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <GPIO_digitalWrite+0x24>
 152:	20 95       	com	r18
 154:	29 23       	and	r18, r25
 156:	20 83       	st	Z, r18
 158:	08 95       	ret

0000015a <GPIO_enablePullup>:

// Activa o desactiva la resistencia pull-up en un pin de entrada
void GPIO_enablePullup(volatile uint8_t *port, uint8_t pin, uint8_t enable) {
	if (enable) {
 15a:	44 23       	and	r20, r20
 15c:	61 f0       	breq	.+24     	; 0x176 <GPIO_enablePullup+0x1c>
		*port |= (1 << pin);  // Activar pull-up
 15e:	fc 01       	movw	r30, r24
 160:	40 81       	ld	r20, Z
 162:	21 e0       	ldi	r18, 0x01	; 1
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <GPIO_enablePullup+0x12>
 168:	22 0f       	add	r18, r18
 16a:	33 1f       	adc	r19, r19
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <GPIO_enablePullup+0xe>
 170:	24 2b       	or	r18, r20
 172:	20 83       	st	Z, r18
 174:	08 95       	ret
		} else {
		*port &= ~(1 << pin); // Desactivar pull-up
 176:	fc 01       	movw	r30, r24
 178:	40 81       	ld	r20, Z
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <GPIO_enablePullup+0x2a>
 180:	22 0f       	add	r18, r18
 182:	33 1f       	adc	r19, r19
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <GPIO_enablePullup+0x26>
 188:	20 95       	com	r18
 18a:	24 23       	and	r18, r20
 18c:	20 83       	st	Z, r18
 18e:	08 95       	ret

00000190 <setup_gpio>:
uint8_t EEPROM_read(uint16_t address) {
	while (EECR & (1 << EEPE)); // Esperar si EEPROM está ocupada
	EEAR = address;  // Configurar dirección
	EECR |= (1 << EERE); // Iniciar lectura
	return EEDR;    // Retornar el dato leído
}
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	87 e2       	ldi	r24, 0x27	; 39
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 79 00 	call	0xf2	; 0xf2 <GPIO_pinMode>
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	62 e0       	ldi	r22, 0x02	; 2
 1a0:	87 e2       	ldi	r24, 0x27	; 39
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 79 00 	call	0xf2	; 0xf2 <GPIO_pinMode>
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	63 e0       	ldi	r22, 0x03	; 3
 1ac:	87 e2       	ldi	r24, 0x27	; 39
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 79 00 	call	0xf2	; 0xf2 <GPIO_pinMode>
 1b4:	41 e0       	ldi	r20, 0x01	; 1
 1b6:	67 e0       	ldi	r22, 0x07	; 7
 1b8:	8a e2       	ldi	r24, 0x2A	; 42
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 79 00 	call	0xf2	; 0xf2 <GPIO_pinMode>
 1c0:	41 e0       	ldi	r20, 0x01	; 1
 1c2:	66 e0       	ldi	r22, 0x06	; 6
 1c4:	8a e2       	ldi	r24, 0x2A	; 42
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 79 00 	call	0xf2	; 0xf2 <GPIO_pinMode>
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	65 e0       	ldi	r22, 0x05	; 5
 1d0:	8a e2       	ldi	r24, 0x2A	; 42
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 79 00 	call	0xf2	; 0xf2 <GPIO_pinMode>
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	64 e0       	ldi	r22, 0x04	; 4
 1dc:	8a e2       	ldi	r24, 0x2A	; 42
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 79 00 	call	0xf2	; 0xf2 <GPIO_pinMode>
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	63 e0       	ldi	r22, 0x03	; 3
 1e8:	8a e2       	ldi	r24, 0x2A	; 42
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 79 00 	call	0xf2	; 0xf2 <GPIO_pinMode>
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	62 e0       	ldi	r22, 0x02	; 2
 1f4:	8a e2       	ldi	r24, 0x2A	; 42
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 79 00 	call	0xf2	; 0xf2 <GPIO_pinMode>
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	61 e0       	ldi	r22, 0x01	; 1
 200:	8a e2       	ldi	r24, 0x2A	; 42
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 79 00 	call	0xf2	; 0xf2 <GPIO_pinMode>
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	63 e0       	ldi	r22, 0x03	; 3
 20c:	8b e2       	ldi	r24, 0x2B	; 43
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_enablePullup>
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	62 e0       	ldi	r22, 0x02	; 2
 218:	8b e2       	ldi	r24, 0x2B	; 43
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_enablePullup>
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	8b e2       	ldi	r24, 0x2B	; 43
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 ad 00 	call	0x15a	; 0x15a <GPIO_enablePullup>
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	88 e2       	ldi	r24, 0x28	; 40
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_digitalWrite>
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	62 e0       	ldi	r22, 0x02	; 2
 23c:	88 e2       	ldi	r24, 0x28	; 40
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_digitalWrite>
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	63 e0       	ldi	r22, 0x03	; 3
 248:	88 e2       	ldi	r24, 0x28	; 40
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_digitalWrite>
 250:	08 95       	ret

00000252 <toggle_leds>:
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	88 e2       	ldi	r24, 0x28	; 40
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_digitalWrite>
 25e:	2f e7       	ldi	r18, 0x7F	; 127
 260:	84 e8       	ldi	r24, 0x84	; 132
 262:	9e e1       	ldi	r25, 0x1E	; 30
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <toggle_leds+0x12>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <toggle_leds+0x1c>
 26e:	00 00       	nop
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	88 e2       	ldi	r24, 0x28	; 40
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_digitalWrite>
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	62 e0       	ldi	r22, 0x02	; 2
 280:	88 e2       	ldi	r24, 0x28	; 40
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_digitalWrite>
 288:	2f e7       	ldi	r18, 0x7F	; 127
 28a:	84 e8       	ldi	r24, 0x84	; 132
 28c:	9e e1       	ldi	r25, 0x1E	; 30
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	90 40       	sbci	r25, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <toggle_leds+0x3c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <toggle_leds+0x46>
 298:	00 00       	nop
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	62 e0       	ldi	r22, 0x02	; 2
 29e:	88 e2       	ldi	r24, 0x28	; 40
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_digitalWrite>
 2a6:	08 95       	ret

000002a8 <beep_buzzer>:
 2a8:	41 e0       	ldi	r20, 0x01	; 1
 2aa:	63 e0       	ldi	r22, 0x03	; 3
 2ac:	88 e2       	ldi	r24, 0x28	; 40
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_digitalWrite>
 2b4:	2f e3       	ldi	r18, 0x3F	; 63
 2b6:	8d e0       	ldi	r24, 0x0D	; 13
 2b8:	93 e0       	ldi	r25, 0x03	; 3
 2ba:	21 50       	subi	r18, 0x01	; 1
 2bc:	80 40       	sbci	r24, 0x00	; 0
 2be:	90 40       	sbci	r25, 0x00	; 0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <beep_buzzer+0x12>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <beep_buzzer+0x1c>
 2c4:	00 00       	nop
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	63 e0       	ldi	r22, 0x03	; 3
 2ca:	88 e2       	ldi	r24, 0x28	; 40
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_digitalWrite>
 2d2:	08 95       	ret

000002d4 <read_keypad>:
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	3f c0       	rjmp	.+126    	; 0x356 <read_keypad+0x82>
 2d8:	8b b1       	in	r24, 0x0b	; 11
 2da:	80 6f       	ori	r24, 0xF0	; 240
 2dc:	8b b9       	out	0x0b, r24	; 11
 2de:	3b b1       	in	r19, 0x0b	; 11
 2e0:	62 2f       	mov	r22, r18
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	47 e0       	ldi	r20, 0x07	; 7
 2e6:	50 e0       	ldi	r21, 0x00	; 0
 2e8:	46 1b       	sub	r20, r22
 2ea:	57 0b       	sbc	r21, r23
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <read_keypad+0x22>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	4a 95       	dec	r20
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <read_keypad+0x1e>
 2fa:	80 95       	com	r24
 2fc:	83 23       	and	r24, r19
 2fe:	8b b9       	out	0x0b, r24	; 11
 300:	83 ec       	ldi	r24, 0xC3	; 195
 302:	99 e0       	ldi	r25, 0x09	; 9
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <read_keypad+0x30>
 308:	00 c0       	rjmp	.+0      	; 0x30a <read_keypad+0x36>
 30a:	00 00       	nop
 30c:	4b 99       	sbic	0x09, 3	; 9
 30e:	0a c0       	rjmp	.+20     	; 0x324 <read_keypad+0x50>
 310:	fb 01       	movw	r30, r22
 312:	ee 0f       	add	r30, r30
 314:	ff 1f       	adc	r31, r31
 316:	6e 0f       	add	r22, r30
 318:	7f 1f       	adc	r23, r31
 31a:	fb 01       	movw	r30, r22
 31c:	e0 50       	subi	r30, 0x00	; 0
 31e:	ff 4f       	sbci	r31, 0xFF	; 255
 320:	80 81       	ld	r24, Z
 322:	08 95       	ret
 324:	4a 99       	sbic	0x09, 2	; 9
 326:	0a c0       	rjmp	.+20     	; 0x33c <read_keypad+0x68>
 328:	fb 01       	movw	r30, r22
 32a:	ee 0f       	add	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	6e 0f       	add	r22, r30
 330:	7f 1f       	adc	r23, r31
 332:	fb 01       	movw	r30, r22
 334:	e0 50       	subi	r30, 0x00	; 0
 336:	ff 4f       	sbci	r31, 0xFF	; 255
 338:	81 81       	ldd	r24, Z+1	; 0x01
 33a:	08 95       	ret
 33c:	49 99       	sbic	0x09, 1	; 9
 33e:	0a c0       	rjmp	.+20     	; 0x354 <read_keypad+0x80>
 340:	fb 01       	movw	r30, r22
 342:	ee 0f       	add	r30, r30
 344:	ff 1f       	adc	r31, r31
 346:	6e 0f       	add	r22, r30
 348:	7f 1f       	adc	r23, r31
 34a:	fb 01       	movw	r30, r22
 34c:	e0 50       	subi	r30, 0x00	; 0
 34e:	ff 4f       	sbci	r31, 0xFF	; 255
 350:	82 81       	ldd	r24, Z+2	; 0x02
 352:	08 95       	ret
 354:	2f 5f       	subi	r18, 0xFF	; 255
 356:	24 30       	cpi	r18, 0x04	; 4
 358:	08 f4       	brcc	.+2      	; 0x35c <read_keypad+0x88>
 35a:	be cf       	rjmp	.-132    	; 0x2d8 <read_keypad+0x4>
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	08 95       	ret

00000360 <capturar_contra>:

// Función para capturar la contraseña desde el teclado
void capturar_contra(void) {
 360:	cf 93       	push	r28
	uint8_t i = 0;
 362:	c0 e0       	ldi	r28, 0x00	; 0
	while (i < PASSWORD_LENGTH) {
 364:	38 c0       	rjmp	.+112    	; 0x3d6 <capturar_contra+0x76>
		char tecla = read_keypad(); // Leer tecla del teclado matricial
 366:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <read_keypad>

		if (tecla) { // Si se presiona una tecla válida
 36a:	88 23       	and	r24, r24
 36c:	71 f1       	breq	.+92     	; 0x3ca <capturar_contra+0x6a>
			contra_temporal[i] = tecla;
 36e:	ec 2f       	mov	r30, r28
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	e4 5f       	subi	r30, 0xF4	; 244
 374:	fe 4f       	sbci	r31, 0xFE	; 254
 376:	80 83       	st	Z, r24
			i++;
 378:	cf 5f       	subi	r28, 0xFF	; 255
		   beep_buzzer(); //Suena el buzzer al presionar
 37a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <beep_buzzer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37e:	2f e9       	ldi	r18, 0x9F	; 159
 380:	86 e8       	ldi	r24, 0x86	; 134
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	21 50       	subi	r18, 0x01	; 1
 386:	80 40       	sbci	r24, 0x00	; 0
 388:	90 40       	sbci	r25, 0x00	; 0
 38a:	e1 f7       	brne	.-8      	; 0x384 <capturar_contra+0x24>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <capturar_contra+0x2e>
 38e:	00 00       	nop
		   _delay_ms(500); // Debounce
			if (i == PASSWORD_LENGTH) { // Si se han ingresado 4 teclas
 390:	c4 30       	cpi	r28, 0x04	; 4
 392:	d9 f4       	brne	.+54     	; 0x3ca <capturar_contra+0x6a>
				eeprom_write_block((const void*)contra_temporal, (void*)EEPROM_ADDR, PASSWORD_LENGTH);
 394:	44 e0       	ldi	r20, 0x04	; 4
 396:	50 e0       	ldi	r21, 0x00	; 0
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	8c e0       	ldi	r24, 0x0C	; 12
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	0e 94 24 02 	call	0x448	; 0x448 <eeprom_write_block>
				beep_buzzer(); // Confirmación de escritura
 3a4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <beep_buzzer>
 3a8:	8f e4       	ldi	r24, 0x4F	; 79
 3aa:	93 ec       	ldi	r25, 0xC3	; 195
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <capturar_contra+0x4c>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <capturar_contra+0x52>
 3b2:	00 00       	nop
				_delay_ms(200); // Debounce
				beep_buzzer(); // Confirmación de escritura
 3b4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <beep_buzzer>
 3b8:	8f e4       	ldi	r24, 0x4F	; 79
 3ba:	93 ec       	ldi	r25, 0xC3	; 195
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <capturar_contra+0x5c>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <capturar_contra+0x62>
 3c2:	00 00       	nop
				_delay_ms(200); // Debounce
				beep_buzzer(); // Confirmación de escritura
 3c4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <beep_buzzer>
								
				break;
 3c8:	08 c0       	rjmp	.+16     	; 0x3da <capturar_contra+0x7a>
 3ca:	8f e4       	ldi	r24, 0x4F	; 79
 3cc:	93 ec       	ldi	r25, 0xC3	; 195
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <capturar_contra+0x6e>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <capturar_contra+0x74>
 3d4:	00 00       	nop
}

// Función para capturar la contraseña desde el teclado
void capturar_contra(void) {
	uint8_t i = 0;
	while (i < PASSWORD_LENGTH) {
 3d6:	c4 30       	cpi	r28, 0x04	; 4
 3d8:	30 f2       	brcs	.-116    	; 0x366 <capturar_contra+0x6>
				break;
			}
		}
		_delay_ms(200); // Debounce
	}
}
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <main>:



int main(void)
{
	    setup_gpio(); // Configurar GPIOs
 3de:	0e 94 c8 00 	call	0x190	; 0x190 <setup_gpio>
		    char key;
			// Inicializar los pines de los leds
			GPIO_digitalWrite(&PORTD, FILA_1, HIGH);   // Apagar LED1
 3e2:	41 e0       	ldi	r20, 0x01	; 1
 3e4:	67 e0       	ldi	r22, 0x07	; 7
 3e6:	8b e2       	ldi	r24, 0x2B	; 43
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_digitalWrite>
			GPIO_digitalWrite(&PORTD, FILA_2, HIGH);   // Apagar LED1
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	66 e0       	ldi	r22, 0x06	; 6
 3f2:	8b e2       	ldi	r24, 0x2B	; 43
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_digitalWrite>
			GPIO_digitalWrite(&PORTD, FILA_3, HIGH);   // Apagar LED1
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	65 e0       	ldi	r22, 0x05	; 5
 3fe:	8b e2       	ldi	r24, 0x2B	; 43
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_digitalWrite>
			GPIO_digitalWrite(&PORTD, FILA_4, HIGH);   // Apagar LED1
 406:	41 e0       	ldi	r20, 0x01	; 1
 408:	64 e0       	ldi	r22, 0x04	; 4
 40a:	8b e2       	ldi	r24, 0x2B	; 43
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_digitalWrite>
			
			toggle_leds();
 412:	0e 94 29 01 	call	0x252	; 0x252 <toggle_leds>
			beep_buzzer();	// Secuencia de Beep del buzzer
 416:	0e 94 54 01 	call	0x2a8	; 0x2a8 <beep_buzzer>
 41a:	2f e3       	ldi	r18, 0x3F	; 63
 41c:	8d e0       	ldi	r24, 0x0D	; 13
 41e:	93 e0       	ldi	r25, 0x03	; 3
 420:	21 50       	subi	r18, 0x01	; 1
 422:	80 40       	sbci	r24, 0x00	; 0
 424:	90 40       	sbci	r25, 0x00	; 0
 426:	e1 f7       	brne	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
			_delay_ms(1000);
			beep_buzzer();	// Secuencia de Beep del buzzer
 42c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <beep_buzzer>
			
    while (1) {
		        capturar_contra(); // Capturar 4 teclas y escribir en EEPROM
 430:	0e 94 b0 01 	call	0x360	; 0x360 <capturar_contra>
 434:	2f e3       	ldi	r18, 0x3F	; 63
 436:	8d e0       	ldi	r24, 0x0D	; 13
 438:	93 e0       	ldi	r25, 0x03	; 3
 43a:	21 50       	subi	r18, 0x01	; 1
 43c:	80 40       	sbci	r24, 0x00	; 0
 43e:	90 40       	sbci	r25, 0x00	; 0
 440:	e1 f7       	brne	.-8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 442:	00 c0       	rjmp	.+0      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 444:	00 00       	nop
 446:	f4 cf       	rjmp	.-24     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>

00000448 <eeprom_write_block>:
 448:	dc 01       	movw	r26, r24
 44a:	cb 01       	movw	r24, r22
 44c:	03 c0       	rjmp	.+6      	; 0x454 <eeprom_write_block+0xc>
 44e:	2d 91       	ld	r18, X+
 450:	0e 94 2f 02 	call	0x45e	; 0x45e <eeprom_write_r18>
 454:	41 50       	subi	r20, 0x01	; 1
 456:	50 40       	sbci	r21, 0x00	; 0
 458:	d0 f7       	brcc	.-12     	; 0x44e <eeprom_write_block+0x6>
 45a:	08 95       	ret

0000045c <eeprom_write_byte>:
 45c:	26 2f       	mov	r18, r22

0000045e <eeprom_write_r18>:
 45e:	f9 99       	sbic	0x1f, 1	; 31
 460:	fe cf       	rjmp	.-4      	; 0x45e <eeprom_write_r18>
 462:	1f ba       	out	0x1f, r1	; 31
 464:	92 bd       	out	0x22, r25	; 34
 466:	81 bd       	out	0x21, r24	; 33
 468:	20 bd       	out	0x20, r18	; 32
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	f8 94       	cli
 46e:	fa 9a       	sbi	0x1f, 2	; 31
 470:	f9 9a       	sbi	0x1f, 1	; 31
 472:	0f be       	out	0x3f, r0	; 63
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	08 95       	ret

00000478 <_exit>:
 478:	f8 94       	cli

0000047a <__stop_program>:
 47a:	ff cf       	rjmp	.-2      	; 0x47a <__stop_program>
